VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Api"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Option Explicit

'==================
' local constants
'==================
Const STR_CONNECTION_CLOSED = "Connection to TWS is closed"

' data members
Private WithEvents m_Tws As TWSLib.Tws
Attribute m_Tws.VB_VarHelpID = -1
Private m_orderId As Long

'[DANO]

Public bolLoading As Boolean
Public arrFA As Variant
Private timeStampXp As String
Private x As Integer
Private t As Single

Private upAccountValue As Long
Private upAccountTime As Long
Private uportfolioEx As Long
'[END DANO]


'===============
' constructor
'===============
Private Sub Class_Initialize()
    Debug.Print "Api.Class_Initialize"
    Set m_Tws = New TWSLib.Tws
End Sub

'===============
' destructor
'===============
Private Sub Class_Terminate()
    Debug.Print "Api.Class_Terminate"
    Set m_Tws = Nothing
End Sub

Public Property Get Tws() As TWSLib.Tws
    Set Tws = m_Tws
End Property

Public Property Get NextOrderId() As Long
    NextOrderId = m_orderId
    m_orderId = m_orderId + 1
End Property

'[DANO] ---------------------------------
Public Sub Connect()
    m_Tws.Connect "127.0.0.1", 7496, 1, False
End Sub

Public Sub PasteRecordSets()
    Dim k
    
    ThisWorkbook.Activate
    General.Activate    '// WorkSheet codename 'General'
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual

    For Each k In db.o
        With Sheets(k)
            .AutoFilterMode = False
            .Cells.Clear
            With .QueryTables.Add(db.o(k)("rs"), .Cells(1))
                .Refresh
                .Delete
            End With
        End With
    Next k
    
    Application.Calculate
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.EnableEvents = True

End Sub

Public Sub loadAccounts()
    If IsEmpty(arrFA) Then MsgBox "api.connect first, then loadAccounts": Exit Sub
    clearRs
    t = timer
    bolLoading = True
    x = -1
    If Left(arrFA(0), 1) = "F" Then
        m_Tws.reqAccountUpdates True, arrFA(0) & "A"
    Else
        loadNextAccount
    End If
End Sub

Private Sub clearRs()
    Dim k
    
    For Each k In db.o
        With db.o(k)("rs")
            .Filter = 1 'adFilterPendingRecords
            If Not (.BOF Or .EOF) Then .Delete 2 ' adAffectPending
            .Filter = 0
        End With
    Next k
End Sub
Private Sub loadNextAccount()
    x = x + 1
    Select Case False
        Case bolLoading
            Debug.Assert False
        Case x < UBound(arrFA)
            m_Tws.reqAccountUpdates False, arrFA(x - 1) '// unsubscribe from last account updates
            bolLoading = False
            Debug.Print vbLf; "loadNextAccount-end"
            Debug.Print "Acct Time  #timeUpdates  #actValues . #portExValues .#portValues"
            Debug.Print timer - t, UBound(arrFA), CSng(UBound(arrFA) / (timer - t)); "Accounts Loaded: "; vbLf; Join(arrFA, ","); vbLf
            Me.PasteRecordSets
        Case Else
            m_Tws.reqAccountUpdates True, arrFA(x)      '// subscribe to next account
    End Select
End Sub
'[END DANO]------------------------------



Private Sub m_Tws_accountSummaryEnd(ByVal reqId As Long)
    Debug.Print "event:m_Tws_accountSummaryEnd"
End Sub

Private Sub m_Tws_completedOrdersEnd()
    Debug.Print "event:m_Tws_completedOrdersEnd"
End Sub

Private Sub m_Tws_connectAck()
    Debug.Print "event:m_Tws_connectAck", "Connected"
End Sub

'=======================================
' TWS Control - Events generated by ActiveX TWS control
'=======================================
' connection closed
Private Sub m_Tws_connectionClosed()
    Debug.Print "event: m_Tws_connectionClosed"
End Sub

' error
Private Sub m_Tws_errMsg(ByVal id As Long, ByVal errorCode As Long, ByVal errorMsg As String)
    On Error Resume Next
   
    ' log error message
''    Log.LogMessage id, errorCode, errorMsg
    Debug.Print "event:m_Tws_errMsg: "; id, errorCode, errorMsg
    
    If errorCode = 504 Then
        ' not connected
        Debug.Print "event:m_Tws_errMsg - Api Not Connected"
    ElseIf id >= ORDER_ID_BASE Then
''        BasicOrders.ProcessError id, errorCode, errorMsg
''        ConditionalOrders.ProcessError id, errorCode, errorMsg
''        AdvancedOrders.ProcessError id, errorCode, errorMsg
''        Advisors.ProcessError id, errorCode, errorMsg
    End If
    
''    Select Case id
''        Case ID_TICKERS To ID_TICKERS + ID_GAP - 1
''''            Tickers.ProcessError id, errorCode, errorMsg
''
''        Case ID_PORTFOLIO To ID_PORTFOLIO + ID_GAP - 1
''            Portfolio.ProcessError id, errorCode, errorMsg
''
''        Case ID_MKTDEPTH To ID_MKTDEPTH + ID_GAP - 1
''            If errorCode <> 2152 Then
''                MarketDepth.ProcessError id, errorCode, errorMsg
''            End If
''        Case ID_HISTDATA To ID_HISTDATA + ID_GAP - 1
''            HistoricalData.ProcessError id, errorCode, errorMsg
''
''        Case ID_CONTRACTDETAILS To ID_CONTRACTDETAILS + ID_GAP - 1
''            ContractDetails.ProcessError id, errorCode, errorMsg
''
''        Case ID_BONDCONTRACTDETAILS To ID_BONDCONTRACTDETAILS + ID_GAP - 1
''            BondContractDetails.ProcessError id, errorCode, errorMsg
''
''        Case ID_REALTIMEBARS To ID_REALTIMEBARS + ID_GAP - 1
''            RealTimeBars.ProcessError id, errorCode, errorMsg
''
''        Case ID_MARKETSCANNER To ID_MARKETSCANNER + ID_GAP - 1
''            MarketScanner.ProcessError id, errorCode, errorMsg
''
''        Case ID_FUNDAMENTALS To ID_FUNDAMENTALRATIOS + ID_GAP - 1
''            Fundamentals.ProcessError id, errorCode, errorMsg
''
''        Case ID_CALC_IMPL_VOL To ID_CALC_IMPL_VOL + ID_GAP - 1
''            Tickers.ProcessError id, errorCode, errorMsg
''
''        Case ID_CALC_OPTION_PRICE To ID_CALC_OPTION_PRICE + ID_GAP - 1
''            Tickers.ProcessError id, errorCode, errorMsg
''
''        Case ID_TICKBYTICKDATA To ID_TICKBYTICKDATA + ID_GAP - 1
''            TickByTick.ProcessError id, errorCode, errorMsg
''
''        Case Else
''            If General.ShowErrorsMsgBoxChk.Value Then
''                MsgBox "Error" & Chr(13) & "id: " & id & Chr(13) & "errorCode: " & errorCode & Chr(13) _
''                        & "errorMsg: " & errorMsg
''            End If
''
''    End Select
End Sub


Private Sub m_Tws_headTimestamp(ByVal reqId As Long, ByVal timeStamp As String)
    On Error Resume Next
''    HeadTimestamp.UpdateHeadTimestamp reqId, timeStamp
    Debug.Print "headTimestamp", reqId, timeStamp
End Sub

Private Sub m_Tws_histogramData(ByVal reqId As Long, ByVal data As TWSLib.IHistogramEntry)
    On Error Resume Next
''    Histogram.UpdateHistogramData reqId, data.price, data.size
End Sub

Private Sub m_Tws_historicalDataEnd(ByVal reqId As Long, ByVal startDate As String, ByVal endDate As String)
    On Error Resume Next
''    HistoricalData.FinishUpdateHistoricalData reqId, startDate, endDate
End Sub

Private Sub m_Tws_historicalNews(ByVal requestId As Long, ByVal time As String, ByVal providerCode As String, ByVal articleId As String, ByVal headline As String)
''    News.HistoricalNews requestId, time, providerCode, articleId, headline
End Sub

Private Sub m_Tws_historicalNewsEnd(ByVal requestId As Long, ByVal hasMore As Boolean)
''    News.HistoricalNewsEnd requestId, hasMore
End Sub

' market data type responce
Private Sub m_Tws_marketDataType(ByVal reqId As Long, ByVal marketDataType As Long)
    On Error Resume Next
''    Tickers.UpdateMarketDataType reqId, marketDataType
End Sub

'[TODO]
Private Sub m_Tws_marketRule(ByVal marketRuleId As Long, ByVal priceIncrements As TWSLib.IPriceIncrementList)
    Dim inc As TWSLib.ComPriceIncrement
    Debug.Print "reqMarketRule " & marketRuleId
    For Each inc In priceIncrements
        Debug.Print VBA.Now() & " m_Tws_historicalTicksLast " & " inc: " & inc & " item: " & inc.Item
    Next
    'ContractDetails.marketRule CLng(marketRuleId), increments
End Sub
'[TODO -END]

Private Sub m_Tws_newsArticle(ByVal requestId As Long, ByVal articleType As Long, ByVal articleText As String)
''    News.newsArticle requestId, articleType, articleText
End Sub

Private Sub m_Tws_newsProviders(ByVal newsProviders As TWSLib.INewsProviderList)
'    News.newsProviders newsProviders
End Sub

'[DANO] nextValidId event on 'connected'
' next valid Id
Private Sub m_Tws_nextValidId(ByVal id As Long)
    On Error Resume Next
'    General.SetConnected
    If id < ORDER_ID_BASE Then
        m_orderId = ORDER_ID_BASE
    Else
        m_orderId = id
    End If
    Debug.Print "event:m_Tws_nextValidId", id
End Sub


Private Sub m_Tws_openOrder1(ByVal id As Long, ByVal symbol As String, ByVal secType As String, ByVal lastTradeDate As String, ByVal strike As Double, ByVal right As String, ByVal exchange As String, ByVal curency As String, ByVal localSymbol As String)
    Debug.Print "event:m_Tws_openOrder1", symbol
End Sub

Private Sub m_Tws_openOrder2(ByVal id As Long, ByVal action As String, ByVal quantity As Double, ByVal orderType As String, ByVal lmtPrice As Double, ByVal auxPrice As Double, ByVal tif As String, ByVal ocaGroup As String, ByVal account As String, ByVal openClose As String, ByVal origin As Long, ByVal orderRef As String, ByVal clientId As Long)
    Debug.Print "event:m_Tws_openOrder2"
End Sub

Private Sub m_Tws_openOrder3(ByVal id As Long, ByVal symbol As String, ByVal secType As String, ByVal lastTradeDate As String, ByVal strike As Double, ByVal right As String, ByVal exchange As String, ByVal curency As String, ByVal localSymbol As String, ByVal action As String, ByVal quantity As Double, ByVal orderType As String, ByVal lmtPrice As Double, ByVal auxPrice As Double, ByVal tif As String, ByVal ocaGroup As String, ByVal account As String, ByVal openClose As String, ByVal origin As Long, ByVal orderRef As String, ByVal clientId As Long, ByVal permId As Long, ByVal sharesAllocation As String, ByVal faGroup As String, ByVal faMethod As String, ByVal faPercentage As String, ByVal faProfile As String, ByVal goodAfterTime As String, ByVal goodTillDate As String)
    Debug.Print "event:m_Tws_openOrder3"
End Sub
''Private Sub m_Tws_openOrder4(ByVal id As Long, ByVal symbol As String, ByVal secType As String, ByVal lastTradeDate As String, ByVal strike As Double, ByVal right As String, ByVal exchange As String, ByVal curency As String, ByVal localSymbol As String, ByVal action As String, ByVal quantity As Double, ByVal orderType As String, ByVal lmtPrice As Double, ByVal auxPrice As Double, ByVal tif As String, ByVal ocaGroup As String, ByVal account As String, ByVal openClose As String, ByVal origin As Long, ByVal orderRef As String, ByVal clientId As Long, ByVal permId As Long, ByVal sharesAllocation As String, ByVal faGroup As String, ByVal faMethod As String, ByVal faPercentage As String, ByVal faProfile As String, ByVal goodAfterTime As String, ByVal goodTillDate As String)
''    Debug.Print "event:m_Tws_openOrder3"
''End Sub

Private Sub m_Tws_openOrderEnd()
    Debug.Print "event:m_Tws_openOrderEnd"
End Sub

'-----------------------------
' orders events
'-----------------------------
Private Sub m_Tws_orderStatus(ByVal id As Long, ByVal status As String, ByVal filled As Double, ByVal remaining As Double, ByVal avgFillPrice As Double, ByVal permId As Long, ByVal parentId As Long, ByVal lastFillPrice As Double, ByVal clientId As Long, ByVal whyHeld As String, ByVal mktCapPrice As Double)
    On Error Resume Next
    Debug.Print "event:m_Tws_orderStatus"
    ' update Orders sheet data
        
''    If id <> 0 Then
''        BasicOrders.UpdateOrderStatus id, status, filled, remaining, avgFillPrice, parentId, lastFillPrice
''        ConditionalOrders.UpdateOrderStatus id, status, filled, remaining, avgFillPrice, parentId, lastFillPrice
''        AdvancedOrders.UpdateOrderStatus id, status, filled, remaining, avgFillPrice, parentId, lastFillPrice
''        Advisors.UpdateOrderStatus id, status, filled, remaining, avgFillPrice, parentId, lastFillPrice
''    End If
''
''    On Error Resume Next
''    ' update Open Orders sheet data
''    OpenOrders.UpdateOrderStatus id, status, filled, remaining, avgFillPrice, parentId, permId, lastFillPrice
End Sub

Private Sub m_Tws_openOrderEx( _
            ByVal orderId As Long, _
            ByVal contract As TWSLib.IContract, _
            ByVal order As TWSLib.IOrder, _
            ByVal orderState As TWSLib.IOrderState _
            )
    On Error Resume Next
''    If order.WhatIf Then
''        ' update order status (WhatIf) in Basic Orders/Advance Orders sheet
''         BasicOrders.UpdateWhatIfInfo orderId, contract, order, orderState
''         AdvancedOrders.UpdateWhatIfInfo orderId, contract, order, orderState
''         Advisors.UpdateWhatIfInfo orderId, contract, order, orderState
''    Else
''        ' update Open Orders sheet data
''        OpenOrders.UpdateOpenOrder orderId, contract, order, orderState
''    End If
    Debug.Print "event:m_Tws_openOrderEx"
End Sub


Private Sub m_Tws_pnl(ByVal reqId As Long, ByVal dailyPnL As Double, ByVal unrealizedPNL As Double, ByVal realizedPNL As Double)
    On Error Resume Next
''    AcctUpdMulti.UpdatePnL reqId, dailyPnL, unrealizedPNL, realizedPNL
    Debug.Print "event:m_Tws_pnl"
End Sub

Private Sub m_Tws_pnlSingle(ByVal reqId As Long, ByVal pos As Long, ByVal dailyPnL As Double, ByVal unrealizedPNL As Double, ByVal realizedPNL As Double, ByVal Value As Double)
    On Error Resume Next
''    AcctUpdMulti.UpdatePnLSingle reqId, pos, dailyPnL, unrealizedPNL, realizedPNL, Value
    Debug.Print "event:m_Tws_pnlSingle"
End Sub

Private Sub m_Tws_positionEnd()
    Debug.Print "event:m_Tws_positionEnd"
End Sub

Private Sub m_Tws_positionMultiEnd(ByVal requestId As Long)
    Debug.Print "event:m_Tws_positionMultiEnd"
End Sub

Private Sub m_Tws_securityDefinitionOptionParameter(ByVal reqId As Long, ByVal exchange As String, ByVal underlyingConId As Long, ByVal tradingClass As String, ByVal multiplier As String, ByVal expirations As String, ByVal strikes As String)
    On Error Resume Next
''    SecDefOptParams.UpdateSecDefOptParams _
''        reqId, _
''        exchange, _
''        underlyingConId, _
''        tradingClass, _
''        multiplier, _
''        expirations, _
''        strikes
    Debug.Print "event:m_Tws_securityDefinitionOptionParameter"
End Sub


'-----------------------------
' accountportfolio events
'-----------------------------
Private Sub m_Tws_managedAccounts(ByVal accountsList As String)
''    On Error Resume Next
''    Account.UpdateManagedAccounts accountsList
'[DANO]
''    Debug.Print accountsList
    arrFA = Split(accountsList, ",")
''    ReDim arr(UBound(arr) - 1)
''    LoadAccounts
    Debug.Print "event:m_Tws_managedAccounts", UBound(arrFA), accountsList
End Sub

Private Sub m_Tws_updateAccountTime(ByVal timeStamp As String)
''    On Error Resume Next
''    Account.UpdateTimeStamp timeStamp
''    If timeStampXp <> timeStamp Then Debug.Print "timeStampXp:"; timeStampXp, "timeStamp:"; timeStamp
    
    timeStampXp = timeStamp
    upAccountTime = upAccountTime + 1
''    If upAccountTime = Int(upAccountTime / 20) * 20 Then Debug.Print "event:m_Tws_updateAccountTime", timeStamp, upAccountTime
End Sub
Private Sub m_Tws_accountSummary(ByVal reqId As Long, ByVal account As String, _
                ByVal tag As String, ByVal Value As String, ByVal curency As String)
    
    Debug.Print "event:m_Tws_accountSummary"
End Sub

Private Sub m_Tws_updateAccountValue(ByVal key As String, ByVal Value As String, _
                ByVal curency As String, ByVal accountName As String)
    Dim v
    Dim indexXp As String
''    On Error Resume Next
''    Account.UpdateAccountValue key, value, curency, accountName
    If IsNumeric(Value) Then v = CDbl(Value)
    If key = "AccountReady" Then If Value <> "true" Then Stop         '// AccountReady=FALSE
    indexXp = Join(Array(accountName, key, curency), ".")
    With db.o("AccountValues")("rs")
        .AddNew Array("indexXp", "accountName", "key", "currency", "value", "numValue", "timeStamp"), _
            Array( _
            indexXp, _
            accountName, _
            key, _
            curency, _
            Value, _
            v, _
            timeStampXp)
    ''        rs.Update
    End With
'    upAccountValue = upAccountValue + 1
''    Debug.Print "event:m_Tws_updateAccountValue", accountName, key, curency
End Sub

Private Sub m_Tws_accountUpdateMultiEnd(ByVal requestId As Long)
    Debug.Print "event:m_Tws_accountUpdateMultiEnd", requestId
End Sub

Private Sub m_Tws_updatePortfolioEx( _
    ByVal contract As TWSLib.IContract, _
 _
    ByVal position As Double, _
    ByVal marketPrice As Double, _
    ByVal marketValue As Double, _
    ByVal averageCost As Double, _
    ByVal unrealizedPNL As Double, _
    ByVal realizedPNL As Double, _
    ByVal accountName As String _
    )
    Dim indexXp As String
    
    If right(accountName, 1) = "A" Then '// load contracts only on Master All account
        With db.o("Contracts")("rs")
            .AddNew Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), _
                Array( _
                contract.conId, _
                contract.symbol, _
                contract.secType, _
                contract.lastTradeDateOrContractMonth, _
                contract.strike, _
                contract.right, _
                contract.multiplier, _
                contract.exchange, _
                contract.currency, _
                contract.localSymbol, _
                contract.primaryExchange, _
                contract.tradingClass, _
                contract.includeExpired, _
                contract.secIdType, _
                contract.secId, _
                contract.comboLegsDescrip, _
                timeStampXp)
            .Update
        End With
    End If

    indexXp = Join(Array(accountName, contract.symbol), ".")
    With db.o("Portfolios")("rs")
        .AddNew Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), _
                Array( _
                indexXp, _
                accountName, _
                contract.conId, _
                position, _
                marketPrice, _
                marketValue, _
                averageCost, _
                unrealizedPNL, _
                realizedPNL, _
                timeStampXp)
        .Update
    End With
    uportfolioEx = uportfolioEx + 1
End Sub

'----------------------------
' FA events
'----------------------------
Private Sub m_Tws_receiveFA(ByVal faDataType As Long, ByVal cxml As String)
''    On Error Resume Next
''    Account.UpdateFA faDataType, cxml
    Debug.Print "event:m_Tws_receiveFA", faDataType, cxml
End Sub

Private Sub m_Tws_accountDownloadEnd(ByVal accountName As String)
'    m_Tws.reqAccountUpdates False, arrFA(x)    'turns off subscription - not needed if new subscription
    Debug.Print "accountDownloadEnd: "; accountName   '; "."; timeStampXp; ""; upAccountTime; "."; upAccountValue; "."; uportfolioEx; "."; timer - t
''    upAccountTime = 0: upAccountValue = 0: uportfolioEx = 0
    loadNextAccount
''    If right(accountName, 1) = "A" Then
''        m_Tws.reqAccountUpdates False, accountName
''    Else
''        loadNextAccount
''    End If
End Sub
'-------------
' current time events
'-----------------------------
Private Sub m_Tws_currentTime(ByVal time As Long)
    On Error Resume Next
    Debug.Print "event:m_Tws_currentTime: "; time
End Sub
'-----------------------------
' commission reports
'-----------------------------
Private Sub m_Tws_commissionReport(ByVal commissionReport As TWSLib.ICommissionReport)
    On Error Resume Next
''    CommissionReports.UpdateCommissionReports commissionReport
    With commissionReport
        Debug.Print "event:m_Tws_commissionReport", _
            .commission, .execId, .currency
    End With
End Sub
'-----------------------------
' family codes
'-----------------------------
Private Sub m_Tws_familyCodes(ByVal famCodes As TWSLib.IFamilyCodeList)
    On Error Resume Next
    Debug.Print "m_Tws_familyCodes", famCodes
''    FamilyCodes.FamilyCodes famCodes
    
End Sub

'-----------------------------
' completed order
'-----------------------------
Private Sub m_Tws_completedOrder(ByVal contract As TWSLib.IContract, ByVal order As TWSLib.IOrder, ByVal orderState As TWSLib.IOrderState)
    On Error Resume Next
''    CompletedOrders.UpdateCompletedOrder contract, order, orderState
    With order
        Debug.Print "event:m_Tws_completedOrder", _
            contract.localSymbol, .account, .action, .filledQuantity
    End With
    
End Sub


